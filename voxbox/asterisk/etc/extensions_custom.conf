; This file contains example extensions_custom.conf entries.
; extensions_custom.conf should be used to include customizations
; to AMP's Asterisk dialplan.

; Extensions in AMP have access to the 'from-internal' context.
; The context 'from-internal-custom' is included in 'from-internal' by default

[from-internal-custom]				

;# // BEGIN FessBox

exten => 196,1,Answer
exten => 196,2,MusicOnHold()

;exten => 197,1,Hangup
exten => 197,1,Goto(app-blackhole,hangup,1)

exten => 198,1,Wait(100)
exten => 198,n,Hangup

exten => 191,1,Macro(user-callerid,)
exten => 191,n,Wait(2)
exten => 191,n,Macro(openrecording,dorecord2,${EPOCH}-${CALLERID(num)})

exten => 194,1,Dial(console/alsa)
exten => 194,n,Hangup

[macro-openrecording]
exten => s,1,Set(RECFILE=${IF($["${ARG2}" = ""]?/var/spool/asterisk/tmp/${AMPUSER}-ivrrecording:${ARG2})})
exten => s,n,ExecIf($["${ARG3}" != ""]?Authenticate(${ARG3}))
exten => s,n,Goto(${ARG1},1)

exten => dorecord2,1,Playback(pm-to-record-phrase)
exten => dorecord2,n,GotoIf($["${ARG2}" = ""]?skipremove)
exten => dorecord2,n,System(rm ${ASTVARLIBDIR}/sounds/${RECFILE}.*)
exten => dorecord2,n(skipremove),Record(${RECFILE}.wav,,,k)
exten => dorecord2,n,Wait(1)
exten => dorecord2,n,Goto(confmenu2,1)

exten => docheck2,1,Playback(beep)
exten => docheck2,n(dc_start),Background(${RECFILE},m,${CHANNEL(language)},macro-openrecording)
exten => docheck2,n,Wait(1)
exten => docheck2,n,Goto(confmenu2,1)

exten => confmenu2,1,Background(to-listen-to-it&press-1&to-rerecord-it&press-star&astcc-followed-by-pound,m,${CHANNEL(language)},macro-openrecording)
exten => confmenu2,n,Read(RECRESULT,,1,,,4)
exten => confmenu2,n,GotoIf($["x${RECRESULT}"="x*"]?dorecord2,1)
exten => confmenu2,n,GotoIf($["x${RECRESULT}"="x1"]?docheck2,2)
exten => confmenu2,n,Goto(1)

exten => 1,1,Goto(docheck2,dc_start)

exten => *,1,Goto(dorecord2,2)

exten => t,1,Playback(goodbye)
exten => t,n,Hangup

exten => i,1,Playback(pm-invalid-option)
exten => i,n,Goto(confmenu2,1)

exten => h,1,Hangup

;--== end of [macro-openrecording] ==--;

;# // BEGIN Travelin' Man 4 Dialer
exten => 864,1,Answer
exten => 864,n,Wait(2)
exten => 864,n,Flite("Please enter your account number.")
exten => 864,n,Read(MYACCTNO,beep,8)
exten => 864,n,NoOp(ACCTNO: ${MYACCTNO})
exten => 864,n,Flite("Please enter your PIN.")
exten => 864,n,Read(MYPIN,beep,5)
exten => 864,n,NoOp(PIN: ${MYPIN})
exten => 864,n,Set(USERDATA=${ODBC_TRAVMAN4(${MYACCTNO})})
exten => 864,n,GotoIf($["${USERDATA},foo" = ",foo"]?notfound)
exten => 864,n,Set(ACCTNO=${CUT(USERDATA,\,,1)})
exten => 864,n,Set(PIN=${CUT(USERDATA,\,,2)})
exten => 864,n,GotoIf($["${MYPIN}" = "${PIN}"]?anothertry:notfound)
exten => 864,n(theanswer),Flite("Account number:")
exten => 864,n,SayDigits(${ACCTNO})
exten => 864,n,Flite("PIN:")
exten => 864,n,SayDigits(${PIN})
exten => 864,n,NoOp(Entry: ${ACCTNO} - ${PIN})
exten => 864,n(anothertry),Flite("After the beep. Please enter I.P. add dress using the star key for periods. Press pound key when finished.")
exten => 864,n,Read(MYIP,beep,16)
exten => 864,n,Flite("I.P. ADD DRESS:")
exten => 864,n,SayDigits(${MYIP})
exten => 864,n(confirm),Flite("After the beep. Press 1 to process this entry. Or press 2 to start over.")
exten => 864,n,Read(REPEAT,beep,1)
exten => 864,n,GotoIf($["${REPEAT}" = "2"]?anothertry)
exten => 864,n,GotoIf($["${REPEAT}" = "1"]?saveit)
exten => 864,n,Goto(confirm)
exten => 864,n,Flite("Entry aborted. Have a nice day. Good bye.")
exten => 864,n,Hangup
exten => 864,n(notfound),Flite("No matching entry on file. Good bye.")
exten => 864,n,Hangup
exten => 864,n(saveit),System(echo -e "${MYIP}" > /etc/asterisk/tm4/${ACCTNO})
exten => 864,n,Flite("Your I.P. address has been saved. An e mail will be sent when new address has been activated. Good bye.")
exten => 864,n,Hangup
;# // END Travelin' Man 4 Dialer


#include odbc.conf

;# // BEGIN nv-news-yahoo
exten => 951,1,Answer
exten => 951,n,Wait(1)
exten => 951,n,Set(TIMEOUT(digit)=7)
exten => 951,n,Set(TIMEOUT(response)=10)
exten => 951,n(proceed),agi(googletts.agi,"Please hold a moment while we retrieve the latest Yahoo news headlines.",en)
exten => 951,n,AGI(nv-news-yahoo.php,10)
exten => 951,n,agi(googletts.agi,"${NEWS}",en)
exten => 951,n,Hangup
;# // END nv-news-yahoo








;# // BEGIN SMS Dictator
exten => 767,1,Answer
exten => 767,n,Set(GVACCT=yourname) ; your Google Voice account name with @gmail.com
exten => 767,n,Set(GVPASS=yourpassword) ; your Google Voice account password
exten => 767,n,Wait(1)
exten => 767,n(record),Flite("After the beep. I will reecord your S.M.S message. When you're finished. press the pound key.")
exten => 767,n,agi(speech-recog.agi,en-US)
exten => 767,n,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 767,n,Flite("I think you said: ${utterance}")
exten => 767,n,Flite("If this is correct. press 1.")
exten => 767,n,Read(MYCHOICE,beep,1)
exten => 767,n,GotoIf($["foo${MYCHOICE}" = "foo1"]?nextpick)
exten => 767,n,Playback(goodbye)
exten => 767,n,Goto(done)
exten => 767,n(nextpick),Flite("To enter a phone number: press 1. For a name: press 2.")
exten => 767,n,Read(MYCHOICE,beep,1)
exten => 767,n,GotoIf($["foo${MYCHOICE}" = "foo1"]?continue)
exten => 767,n,GotoIf($["foo${MYCHOICE}" = "foo2"]?pickcontact)
exten => 767,n,Playback(goodbye)
exten => 767,n,Goto(done)
exten => 767,n(pickcontact),Set(SMSMSG=${utterance})
exten => 767,n(pickagain),Flite("At the beep say the name of the person or company you wish to contact. Then press the pound key.")
exten => 767,n,agi(speech-recog.agi,en-US)
exten => 767,n,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 767,n,AGI(nv-callwho.php,${utterance})
exten => 767,n,NoOp(Number to call: ${NUM2CALL})
exten => 767,n,GotoIf($["foo${NUM2CALL}" = "foo0"]?pickagain)
exten => 767,n,GotoIf($["foo${NUM2CALL}" = "foo"]?pickagain)
exten => 767,n,Flite("Sending S.M.S message.")
exten => 767,n,System(gvoice -e ${GVACCT} -p ${GVPASS} send_sms ${NUM2CALL} "${SMSMSG}")
exten => 767,n,Flite("S.M.S message has been sent. Good bye.")
exten => 767,n,Goto(done)
exten => 767,n(continue),Flite("Please enter the 10 digit S.M.S number.")
exten => 767,n,Read(SMSNUM,beep,10)
exten => 767,n,Flite("S.M.S message will be sent two.")
exten => 767,n,SayDigits("${SMSNUM}")
exten => 767,n,Flite("To proceed. press 1.")
exten => 767,n,Read(MYPICK,beep,1)
exten => 767,n,GotoIf($["foo${MYPICK}" = "foo1"]?proceed)
exten => 767,n,Playback(goodbye)
exten => 767,n,Goto(done)
exten => 767,n(proceed),Flite("Sending S.M.S message.")
exten => 767,n,System(gvoice -e ${GVACCT} -p ${GVPASS} send_sms ${SMSNUM} "${utterance}")
exten => 767,n,Flite("S.M.S message has been sent. Good bye.")
exten => 767,n(done),Hangup
;# // END SMS Dictator

;# // BEGIN Wolfram Alpha
; Wolfram Alpha Dialplan Interface for PIAF2 servers
; Before use, enter your Wolfram Alpha App ID in /var/lib/asterisk/agi-bin/4747
; See the Nerd Vittles tutorial for details: http://nerdvittles.com/?p=798
exten => 4747,1,Answer()
exten => 4747,2,Wait(1)
exten => 4747,3,flite("After the beep, Say your command, then Press the pound key.")
;exten => 4747,3,swift("After the beep, Say your command, then Press the pound key.")
exten => 4747,4(record),agi(speech-recog.agi,en-US)
exten => 4747,5,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 4747,6,flite("${utterance}")
;exten => 4747,6,swift("${utterance}")
exten => 4747,7,Background(vm-star-cancel)
exten => 4747,8,Background(continue-english-press)
exten => 4747,9,Background(digits/1)
exten => 4747,10,Read(PROCEED,beep,1)                                        
exten => 4747,11,GotoIf($["foo${PROCEED}" = "foo1"]?12:14)
exten => 4747,12,Set(FILE(/tmp/query.txt)=${utterance})
exten => 4747,13,Background(one-moment-please)
exten => 4747,14,System(/var/lib/asterisk/agi-bin/4747)
exten => 4747,15,Set(foo=${FILE(/tmp/results.txt)})
exten => 4747,16,flite("${foo}")
;exten => 4747,16,swift("${foo}")
exten => 4747,17,flite("Have a nice day! Good bye.")
;exten => 4747,17,swift("Have a nice day! Good bye.")
exten => 4747,18,hangup
;# // END Wolfram Alpha

 

;# // BEGIN Today in History
exten => 86329,1,Answer
exten => 86329,2,Wait(1)
exten => 86329,3,Set(TIMEOUT(digit)=7)
exten => 86329,4,Set(TIMEOUT(response)=10)
exten => 86329,5,Flite(Please stand bye while we retrieve: Today in History.)
exten => 86329,6,AGI(nv-today.php)
exten => 86329,7,Playback(/tmp/today)
exten => 86329,8,Wait(1)
exten => 86329,9,Hangup
;# // END Today in History

;# // BEGIN Call by Name
exten => 411,1,Answer
exten => 411,2,Wait(1)
exten => 411,3,Set(TIMEOUT(digit)=7)
exten => 411,4,Set(TIMEOUT(response)=10)
exten => 411,5,GotoIf($[${STAT(e,/usr/bin/swift)}]?8)
exten => 411,6,Flite("At the beep say the name of the person or company you wish to call. Then press the pound key.")
exten => 411,7,Goto(411,9)
exten => 411,8,Swift("At the beep say the name of the person or company you wish to call. Then press the pound key.")
exten => 411,9(record),agi(speech-recog.agi,en-US)
exten => 411,10,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 411,11,AGI(nv-callwho.php,${utterance})
exten => 411,12,NoOp(Number to call: ${NUM2CALL})
exten => 411,13,GotoIf($["foo${NUM2CALL}" = "foo0"]?15)
exten => 411,14,Goto(outbound-allroutes,${NUM2CALL},1)
exten => 411,15,Wait(1)
exten => 411,16,Hangup
;# // END Call by Name

;# // BEGIN Call by Code
exten => 412,1,Answer
exten => 412,2,Wait(1)
exten => 412,3,Set(TIMEOUT(digit)=7)
exten => 412,4,Set(TIMEOUT(response)=10)
exten => 412,5,GotoIf($[${STAT(e,/usr/bin/swift)}]?8)
exten => 412,6,Flite("At the beep enter the first three letters of the name of the person you wish to contact.")
exten => 412,7,Goto(412,9)
exten => 412,8,Swift("At the beep enter the first three letters of the name of the person you wish to contact.")
exten => 412,9,Read(DIALCODE,beep,3)
exten => 412,10,NoOp(Name lookup: ${DIALCODE})
exten => 412,11,AGI(nv-callwho2.php,${DIALCODE})
exten => 412,12,NoOp(Number to call: ${NUM2CALL})
exten => 412,13,GotoIf($["foo${NUM2CALL}" = "foo0"]?15)
exten => 412,14,Goto(outbound-allroutes,${NUM2CALL},1)
exten => 412,15,Wait(1)
exten => 412,16,Hangup
;# // END Call by Code

;# // BEGIN xTide
exten => 8433,1,Answer
exten => 8433,n,Wait(1)
exten => 8433,n,System(/var/lib/asterisk/agi-bin/xtide)
exten => 8433,n,Playback(/tmp/xtide)
exten => 8433,n,Wait(1)
exten => 8433,n,Hangup
;# // END xTide

;# // BEGIN Reminders
exten => 123,1,Answer
exten => 123,2,Wait(1)
exten => 123,3,Authenticate(12345678)
exten => 123,4,Goto(reminder,s,1)
;# // END Reminders

;# // BEGIN Dictionary
exten => 333,1,Answer
exten => 333,n,Wait(1)
exten => 333,n,Set(TIMEOUT(digit)=7)
exten => 333,n,Set(TIMEOUT(response)=10)
exten => 333,n(retryd),agi(googletts.agi,"After the beep say define: or web define: followed by the word you would like defined. $
exten => 333,n,agi(speech-recog.agi,en-US)
exten => 333,n,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 333,n,GotoIf($["${confidence}" > "0.4"]?proceedd:retryd)
exten => 333,n(proceedd),GotoIf($["${utterance:0:6}"= "define"]?proceed2:proceed3)
exten => 333,n(proceed2),Set(WORD=${utterance:7})
exten => 333,n,agi(googletts.agi,"Please hold a moment while we look up the meaning of ${WORD}.",en)
exten => 333,n(newtry2),JabberSend(,guru@googlelabs.com,define ${WORD})
exten => 333,n,Goto(proceednow)
exten => 333,n(proceed3),GotoIf($["${utterance:0:10}"<> "web define"]?retryd)
exten => 333,n,Set(WORD=${utterance:11})
exten => 333,n,agi(googletts.agi,"Please hold a moment while we look up the meaning of ${WORD}.",en)
exten => 333,n,JabberSend(,guru@googlelabs.com,web define ${WORD})
exten => 333,n(proceednow),NoOp(Query: ${WORD}
exten => 333,n,Set(OPTION=${JABBER_RECEIVE(,guru@googlelabs.com)})
exten => 333,n,NoOp(${OPTION})
exten => 333,n,GotoIf($["foo${OPTION}" != "foo"]?keepon2:newtry2)
exten => 333,n(keepon2),Playtones(425/50,0/50)
exten => 333,n,AGI(nv-dictionary-google.php,"${WORD}","${OPTION}")
exten => 333,n,NoOp(Definition of ${WORD}: ${MEANING})
exten => 333,n,agi(googletts.agi,"${MEANING}",en)
exten => 333,n,Hangup
;# // END Dictionary

;# // BEGIN Weather by ZIP
exten => 947,1,Answer
exten => 947,2,Wait(1)
exten => 947,3,Set(TIMEOUT(digit)=7)
exten => 947,4,Set(TIMEOUT(response)=10)
exten => 947,5,Flite("At the beep enter the five digit zip code for the weather report you wish to retrieve.")
exten => 947,6,Read(ZIPCODE,beep,5)
exten => 947,7,Flite("Please hold a moment while we contact the National Weather Service for your report.")
exten => 947,8,AGI(nv-weather-zip.php,${ZIPCODE})
exten => 947,9,NoOp(Wave file: ${TMPWAVE})
exten => 947,10,Playback(${TMPWAVE})
exten => 947,11,Hangup
;# // END Weather by ZIP

;# // BEGIN nv-weather-google
exten => 949,1,Answer
exten => 949,n,Wait(1)
exten => 949,n,Set(TIMEOUT(digit)=7)
exten => 949,n,Set(TIMEOUT(response)=10)
exten => 949,n(retry),agi(googletts.agi,"After the beep say the city and state or province of the weather report you wish to retrieve. Then press pound.",en)
exten => 949,n,agi(speech-recog.agi,en-US)
exten => 949,n,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 949,n,GotoIf($["${confidence}" > "0.4"]?proceed:retry)
exten => 949,n(proceed),agi(googletts.agi,"Please hold a moment while we retrieve your report for ${utterance}.",en)
exten => 949,n,AGI(nv-weather-google.php,${utterance})
exten => 949,n,NoOp(Forecast: ${WEATHER})
exten => 949,n,agi(googletts.agi,"${WEATHER}",en)
exten => 949,n,Hangup
;# // END nv-weather-google

;# // BEGIN nv-stocks-google
exten => 950,1,Answer
exten => 950,n,Wait(1)
exten => 950,n,Set(TIMEOUT(digit)=7)
exten => 950,n,Set(TIMEOUT(response)=10)
exten => 950,n(retrys),agi(googletts.agi,"After the beep say the stock symbol for the report to retrieve. Then press pound.",en)
exten => 950,n,agi(speech-recog.agi,en-US)
exten => 950,n,Noop(= Script returned: ${status} , ${id} , ${confidence} , ${utterance} =)
exten => 950,n,GotoIf($["${confidence}" > "0.3"]?proceeds:retrys)
exten => 950,n(proceeds),agi(googletts.agi,"Please hold a moment while we retrieve your report for ${utterance}.",en)
exten => 950,n,AGI(nv-stocks-google.php,${utterance})
exten => 950,n,NoOp(Stock report: ${STOCK})
exten => 950,n,agi(googletts.agi,"${STOCK}",en)
exten => 950,n,Hangup
;# // END nv-stocks-google


exten => _00.,1,SayDigits(${EXTEN:2},) ; extensions dialed with 00 prefix get looked up in AsteriDex
exten => _00.,2,EAGI(asteridex.agi,${EXTEN})
exten => _00.,3,GotoIf($["${DIAL:0:2}" = "00"]?97)
exten => _00.,4,NoOp(Number to Dial: ${DIAL})
exten => _00.,5,NoOp(Person to Dial: ${DUDE})
exten => _00.,6,Flite("Connecting to: ${DUDE}. One moment please.")
exten => _00.,7,Goto(outbound-allroutes,${DIAL},1)
exten => _00.,8,Hangup()
exten => _00.,97,Playback(num-not-in-db)
exten => _00.,98,Playback(goodbye)
exten => _00.,99,Hangup()

exten => 1234,1,Playback(demo-congrats)		; extensions can dial 1234
exten => 1234,2,Hangup()
exten => h,1,Hangup()
include => custom-recordme			; extensions can also dial 5678 

; custom-count2four,s,1 can be used as a custom target for
; a Digital Receptionist menu or a Ring Group
[custom-count2four]		
exten => s,1,SayDigits(1234)
exten => s,2,Hangup

; custom-recordme,5678,1 can be used as a custom target for
; a Digital Receptionist menu or a Ring Group
[custom-recordme]
exten => 5678,1,Wait(2)
exten => 5678,2,Record(/tmp/asterisk-recording:gsm)
exten => 5678,3,Wait(2)
exten => 5678,4,Playback(/tmp/asterisk-recording)
exten => 5678,5,Wait(2)
exten => 5678,6,Hangup 

; This macro is for dev purposes and just dumps channel/app variables.  Useful when designing new contexts.
[macro-dumpvars]
exten => s,1,Noop(ACCOUNTCODE=${ACCOUNTCODE})
exten => s,2,Noop(ANSWEREDTIME=${ANSWEREDTIME})
exten => s,3,Noop(BLINDTRANSFER=${BLINDTRANSFER})
exten => s,4,Noop(CALLERID=${CALLERID(all)})
exten => s,5,Noop(CALLERID(name)=${CALLERID(name)})
exten => s,6,Noop(CALLERID(number)=${CALLERID(number)})
exten => s,7,Noop(CALLINGPRES=${CALLINGPRES})
exten => s,8,Noop(CHANNEL=${CHANNEL})
exten => s,9,Noop(CONTEXT=${CONTEXT})
exten => s,10,Noop(DATETIME=${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)})
exten => s,11,Noop(DIALEDPEERNAME=${DIALEDPEERNAME})
exten => s,12,Noop(DIALEDPEERNUMBER=${DIALEDPEERNUMBER})
exten => s,13,Noop(DIALEDTIME=${DIALEDTIME})
exten => s,14,Noop(DIALSTATUS=${DIALSTATUS})
exten => s,15,Noop(DNID=${CALLERID(dnid)})
exten => s,16,Noop(EPOCH=${EPOCH})
exten => s,17,Noop(EXTEN=${EXTEN})
exten => s,18,Noop(HANGUPCAUSE=${HANGUPCAUSE})
exten => s,19,Noop(INVALID_EXTEN=${INVALID_EXTEN})
exten => s,20,Noop(LANGUAGE=${LANGUAGE()})
exten => s,21,Noop(MEETMESECS=${MEETMESECS})
exten => s,22,Noop(PRIORITY=${PRIORITY})
exten => s,23,Noop(RDNIS=${CALLERID(rdnis)}})
exten => s,24,Noop(SIPDOMAIN=${SIPDOMAIN})
exten => s,25,Noop(SIP_CODEC=${SIP_CODEC})
exten => s,26,Noop(SIPCALLID=${SIPCALLID})
exten => s,27,Noop(SIPUSERAGENT=${SIPUSERAGENT})
exten => s,29,Noop(TXTCIDNAME=${TXTCIDNAME})
exten => s,30,Noop(UNIQUEID=${UNIQUEID})
exten => s,31,Noop(TOUCH_MONITOR=${TOUCH_MONITOR})
exten => s,32,Noop(MACRO_CONTEXT=${MACRO_CONTEXT})
exten => s,33,Noop(MACRO_EXTEN=${MACRO_EXTEN})
exten => s,34,Noop(MACRO_PRIORITY=${MACRO_PRIORITY})
 
;[google-out]
; you will need to replace buddy@gmail.com with something real 
;exten => 701,1,Dial(gtalk/gtalk_account/buddy@gmail.com) 
 
;[google-in]
;exten => s,1,NoOp( Call from Gtalk )
;exten => s,n,Set(CALLERID(name)="From Google Talk") 
;exten => s,n,Dial(SIP/100) ; this can be a ringgroup or direct extension
 
;jabber notification of inbound call
;exten => 703,1,JABBERSend(gtalk_account,buddy@gmail.com,Inbound call from ${CALLERID(all)})
 
[custom-callboth]
exten => _1NXXNXXXXXX,1,Wait(1)
exten => _1NXXNXXXXXX,n,Background(pls-wait-connect-call)
exten => _1NXXNXXXXXX,n,Goto(outbound-allroutes,${EXTEN},1)
exten => _NXXNXXXXXX,1,Wait(1)
exten => _NXXNXXXXXX,n,Background(pls-wait-connect-call)
exten => _NXXNXXXXXX,n,Goto(outbound-allroutes,${EXTEN},1)




[reminder]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Playback(custom/reminder1)
exten => s,4,Wait(2)
exten => s,5,Set(TMPMSG=${CUT(UNIQUEID,.,-1)}${CUT(UNIQUEID,.,2-)})
exten => s,6,Record(custom/${TMPMSG}:gsm)
exten => s,7,Wait(1)
exten => s,8,Playback(custom/${TMPMSG})
exten => s,9,Wait(1)
exten => s,10,Background(vm-review)
exten => s,11,WaitExten()
exten => 1,1,Goto(reminder7,s,1)
exten => 2,1,Goto(s,8)
exten => 3,1,Goto(s,3)
exten => t,1,Goto(s,10)
exten => i,1,Playback(goodbye)
exten => i,2,Hangup
exten => h,1,Hangup

[reminder2]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Read(APPTDT,custom/reminder2,8) 
exten => s,4,AGI(checkdate.php,${APPTDT})
exten => s,5,GotoIf($["foo${HOTDATE}" = "fooBAD"]?99,1)
exten => s,6,Playback(you-entered)
exten => s,7,GotoIf($["foo${HOTDATE}" = "fooTODAY"]?s,10)
exten => s,8,SayUnixTime(${HOTDATE},,ABdY)
exten => s,9,Goto(s,11)
exten => s,10,Playback(custom/today)
exten => s,11,Goto(reminder3,s,1)
exten => 99,1,Playback(conf-errormenu)
exten => 99,2,Goto(s,3)
exten => t,1,Goto(s,3)
exten => i,1,Goto(s,3)
exten => h,1,Hangup

[reminder3]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Background(if-correct-press)
exten => s,4,Background(digits/1)
exten => s,5,Background(otherwise-press)
exten => s,6,Background(digits/2)
exten => s,7,Background(press-star-cancel)
exten => s,8,WaitExten()
exten => 1,1,Goto(reminder4,s,1)
exten => 2,1,Goto(reminder2,s,1)
exten => *,1,Playback(goodbye)
exten => *,2,System(/bin/rm -f /var/lib/asterisk/sounds/custom/${TMPMSG}.gsm)
exten => *,3,Hangup
exten => t,1,Goto(reminder2,s,6)
exten => i,1,Goto(reminder2,s,6)
exten => h,1,Hangup

[reminder4]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Read(APPTTIME,custom/reminder3,4)
exten => s,4,GotoIf($["foo${APPTTIME}" < "foo1200"]?reminder5,s,1)
exten => s,5,AGI(checktime.php,${APPTDT},${APPTTIME},0,${APPTPHONE})
exten => s,6,GotoIf($["foo${HOTTIME}" = "fooBAD"]?99,1)
exten => s,7,Playback(you-entered)
exten => s,8,SayUnixTime(${HOTTIME},,ABdY)
exten => s,9,Playback(digits/at)
exten => s,10,SayUnixTime(${HOTTIME},,IMP)
exten => s,11,Goto(s,18)
exten => s,12,AGI(checktime.php,${APPTDT},${APPTTIME},1200,${APPTPHONE})
exten => s,13,GotoIf($["foo${HOTTIME}" = "fooBAD"]?99,1)
exten => s,14,Playback(you-entered)
exten => s,15,SayUnixTime(${HOTTIME},,ABdY)
exten => s,16,Playback(digits/at)
exten => s,17,SayUnixTime(${HOTTIME},,IMp)
exten => s,18,Goto(reminder6,s,1)
exten => 99,1,Playback(conf-errormenu)
exten => 99,2,Goto(s,3)
exten => t,1,Goto(s,3)
exten => i,1,Goto(s,3)
exten => h,1,Hangup

[reminder5]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Background(1-for-am-2-for-pm)
exten => s,4,WaitExten()
exten => 1,1,Goto(reminder4,s,5)
exten => 2,1,Goto(reminder4,s,12)
exten => *,1,Playback(goodbye)
exten => *,2,System(/bin/rm -f /var/lib/asterisk/sounds/custom/${TMPMSG}.gsm)
exten => *,3,Hangup
exten => t,1,Goto(reminder4,s,1)
exten => i,1,Goto(s,1)
exten => h,1,Hangup

[reminder6]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Background(if-correct-press)
exten => s,4,Background(digits/1)
exten => s,5,Background(otherwise-press)
exten => s,6,Background(digits/2)
exten => s,7,Background(press-star-cancel)
exten => s,8,WaitExten()
exten => 1,1,Goto(reminder9,s,1)
exten => 2,1,Goto(reminder4,s,1)
exten => *,1,Playback(goodbye)
exten => *,2,System(/bin/rm -f /var/lib/asterisk/sounds/custom/${TMPMSG}.gsm)
exten => *,3,Hangup
exten => t,1,Goto(reminder6,s,3)
exten => i,1,Goto(reminder6,s,3)
exten => h,1,Hangup

[reminder7]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Read(APPTPHONE,custom/reminder4,0)
exten => s,4,Goto(reminder8,s,1)
exten => t,1,Goto(reminder8,s,1)
exten => i,1,Goto(s,3)
exten => #,1,Goto(reminder8,s,1)
exten => h,1,Hangup

[reminder8]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,GotoIf($["foo${APPTPHONE}" = "foo"]?4:5)
exten => s,4,Set(APPTPHONE=${CALLERID(number)})
exten => s,5,Playback(you-entered)
exten => s,6,SayDigits(${APPTPHONE})
exten => s,7,Background(if-correct-press)
exten => s,8,Background(digits/1)
exten => s,9,Background(otherwise-press)
exten => s,10,Background(digits/2)
exten => s,11,Background(press-star-cancel)
exten => s,12,WaitExten()
exten => 1,1,Goto(reminder2,s,1)
exten => 2,1,Goto(reminder7,s,1)
exten => *,1,Playback(goodbye)
exten => *,2,System(/bin/rm -f /var/lib/asterisk/sounds/custom/${TMPMSG}.gsm)
exten => *,3,Hangup
exten => t,1,Goto(reminder8,s,5)
exten => i,1,Goto(reminder8,s,5)
exten => h,1,Hangup

[reminder9]
exten => s,1,Set(TIMEOUT(digit)=7)
exten => s,2,Set(TIMEOUT(response)=10)
exten => s,3,Read(APPTRECUR,custom/reminder6,1)
exten => s,4,Goto(reminder9a,s,1)
exten => t,1,Goto(s,3)
exten => i,1,Goto(s,3)
exten => #,1,Goto(reminder9a,s,1)
exten => h,1,Hangup


[reminder9a]
exten => s,1,NoOp(APPTDT: ${APPTDT})
exten => s,2,NoOp(APPTTIME: ${APPTTIME})
exten => s,3,NoOp(APPTPHONE: ${APPTPHONE})
exten => s,4,NoOp(RECURRING: ${APPTRECUR})
exten => s,5,NoOp(APPTMSG: /var/lib/asterisk/sounds/custom/${APPTTIME}.${APPTDT}.${APPTPHONE}.gsm)
exten => s,6,Playback(your-msg-has-been-saved)
exten => s,7,Playback(goodbye)
exten => s,8,Wait(2)
exten => s,9,Hangup
exten => h,1,System(/bin/mv -f /var/lib/asterisk/sounds/custom/${TMPMSG}.gsm /var/lib/asterisk/sounds/custom/${APPTTIME}.${APPTDT}.${APPTPHONE}.gsm)
exten => h,2,DeadAGI(reminder.php,${APPTDT},${APPTTIME},${APPTPHONE},${APPTRECUR})
exten => h,3,Hangup

[remindem]
exten => s,1,Answer
exten => s,2,Wait(2)
exten => s,3,Set(TIMEOUT(digit)=7)
exten => s,4,Set(TIMEOUT(response)=10)
exten => s,5,Playback(custom/reminder5)
exten => s,6,Wait(2)
exten => s,7,Playback(custom/${MSG})
exten => s,8,Set(TIMEOUT(digit)=4)
exten => s,9,Set(TIMEOUT(response)=5)
exten => s,10,Set(counter=1)
exten => s,11,Background(to-hear-msg-again)
exten => s,12,Background(press-1)
exten => s,13,Background(otherwise-press)
exten => s,14,Read(lepick,digits/2,1)
exten => s,15,GotoIf($["${lepick}" = "2"]?alldone,1:onemo,1)
exten => onemo,1,NoOp(Callee Replayed Message. Dialed: ${APPTPHONE}.)
exten => onemo,2,Playback(custom/${MSG})  ; playing again by request
exten => onemo,3,Set(counter=${counter}+1)
exten => onemo,4,GotoIf($["${counter}" = "1+1+1"]?alldone,1:s,11)
exten => alldone,1,Background(goodbye)
exten => alldone,2,NoOp(Callee Acknowledged Call. Dialed: ${APPTPHONE}.)
exten => alldone,3,Hangup
exten => t,1,NoOp(Callee's Answering Machine probably answered. Dialed: ${APPTPHONE}.)
exten => t,2,Background(restarting)
exten => t,3,Wait(1)
exten => t,4,Playback(custom/${MSG})  ; playing again for ans machine
exten => t,5,Background(goodbye)
exten => t,6,Hangup
exten => i,1,Goto(t,2)
exten => o,1,Goto(t,2)
exten => h,1,Set(email=${DB(EMAIL/${APPTPHONE})}) ; see if number to call has an associated email address
exten => h,2,GotoIf($["foo${email}" = "foo"]?4)
exten => h,3,system(mime-construct --to ${email} --subject "Telephone Reminder" --file /var/lib/asterisk/sounds/custom/${APPTTIME}.${APPTDT}.${APPTPHONE}.gsm --type audio/gsm)
exten => h,4,NoOp(Callee hung up. Dialed: ${APPTPHONE}.)
exten => h,5,System(/bin/rm -f /var/lib/asterisk/sounds/custom/${APPTTIME}.${APPTDT}.${APPTPHONE}.gsm)
exten => h,6,Hangup


[custom-fax-iaxmodem]
exten => s,1,Answer
exten => s,n,Wait(1)
exten => s,n,SendDTMF(1)
exten => s,n,Dial(IAX2/iax-fax0/${EXTEN})
exten => s,n,Dial(IAX2/iax-fax1/${EXTEN})
exten => s,n,Dial(IAX2/iax-fax2/${EXTEN})
exten => s,n,Dial(IAX2/iax-fax3/${EXTEN})
exten => s,n,Busy
exten => s,n,Hangup


[from-fax]
exten => _x.,1,Dial(local/${EXTEN}@from-internal)
exten => _x.,n,Hangup

[new-time]
exten => s,1,ringing
exten => s,2,Set(FutureTime=$[${EPOCH} + 8])
exten => s,3,Set(FutureTimeMod=$[${FutureTime} % 10])
exten => s,4,Set(FutureTime=$[${FutureTime} - ${FutureTimeMod}])
;180 in next line is max # seconds connection can be held open. Use multiples of 10.
exten => s,5,Set(MaxConnectTime=$[${FutureTime} + 180])
exten => s,6,Set(FutureTimeMod=$[${FutureTime} - ${EPOCH}])
exten => s,7,GotoIf($["${FutureTimeMod}" < "0"]?10:8)
exten => s,8,wait(1)
exten => s,9,goto(6)
exten => s,10,Answer
exten => s,11,Set(FutureTime=$[${FutureTime} + 10])
exten => s,12,Set(FutureTimeMod=$[${FutureTime} % 60])
exten => s,13,wait(1)
exten => s,14,playback(at-tone-time-exactly)
exten => s,15,SayUnixTime(${FutureTime},,IM)
exten => s,16,GotoIf($["${FutureTimeMod}" = "0"]?17:19)
exten => s,17,SayUnixTime(${FutureTime},,p)
exten => s,18,goto(22)
exten => s,19,playback(and)
exten => s,20,SayUnixTime(${FutureTime},,S)
exten => s,21,playback(seconds)
exten => s,22,Set(FutureTimeMod=$[${FutureTime} - ${EPOCH}])
exten => s,23,GotoIf($["${FutureTimeMod}" < "1"]?26:24)
exten => s,24,wait(1)
exten => s,25,goto(22)
exten => s,26,playback(beep)
exten => s,27,Set(FutureTimeMod=$[${MaxConnectTime} - ${EPOCH}])
exten => s,28,GotoIf($["${FutureTimeMod}" < "1"]?29:11)
exten => s,29,Hangup
 
;# // BEGIN from internal
[from-internal]
exten => _NXX,1,Dial(SIP/${EXTEN})
exten => _NXXX,1,Dial(SIP/${EXTEN})
exten => _NXXXX,1,Dial(SIP/${EXTEN})
exten => _NXXNXXXXXX,1,Goto(outbound-allroutes,${EXTEN},1)
exten => _1NXXNXXXXXX,1,Goto(outbound-allroutes,${EXTEN:1},1)
;# // END from internal

[from-trunk]
exten => sms,1,Noop(Incoming SMS from ${CALLERID(num)} ${BASE64_DECODE(${SMS_BASE64})} ${SMS_BASE64})
;exten => sms,n,ExecIf($[ "${CALLERID(num):-12:3}" = "355" ]?Set(CALLERID(num)=0${CALLERID(num):-9}))
;exten => sms,n,ExecIf($["${DB(cidname/${CALLERID(num)})}" != ""]?Set(NAME=|${DB(cidname/${CALLERID(num)})}))
;exten => sms,n,AGI(ck_log.php,/var/log/asterisk/sms.txt,"${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} <<-- [${DONGLENAME}] ${CALLERID(num)}: ",${SMS_BASE64},1)
;exten => sms,n,AGI(ck_mail.php,info@merrtaxi.com,"SMS from ${CALLERID(num)} received on ${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} via ${DONGLENAME}",${SMS_BASE64},1)
;exten => sms,n,System(/var/lib/asterisk/bin/callback x ext-queues.771.1 3 '${SMS_BASE64}' &)
;exten => sms,n,Set(ODBC_BRANSYS()=${CALLERID(num):-8})
;sms to special numers are blocked, we can't use this to determine operator
;exten => sms,n,AGI(setoperator.php,${CALLERID(num)},${DONGLENAME})

;exten => sms,n,AGI(tcpconnector.php, sms, ${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}, "${BASE64_DECODE(${SMS_BASE64})}", ${CALLERID(num)})
exten => sms,n,Hangup()
exten => ussd,1,Noop(Incoming USSD: ${BASE64_DECODE(${USSD_BASE64})})
;exten => ussd,n,AGI(ck_log.php,/var/log/asterisk/ussd.txt,"${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)} <<-- [${DONGLENAME}]: ",${USSD_BASE64},1)
exten => ussd,n,Hangup()
exten => s,1,Set(CALLERID(name)=${CALLERID(num)})

